{
    "WorkflowWithConfig": {
        "prefix": "workflowwithconfig",
        "body": [
            "from artificial.workflows.decorators import config_type, field, parameter, workflow",
            "from artificial.workflows.util import get_workflow_config",
            "from dataclasses import dataclass",
            "",
            "",
            "@dataclass",
            "@field('${5:int_field}', config={'uiTitle': '${6:Field Name}'})",
            "class WorkflowConfigType:",
            "\t${5:int_field}:int",
            "",
            "@parameter('${7:param_name}', {'required': True, 'uiTitle': '${8:Display Name}'})",
            "@workflow(\"${1:wf_name}\", \"${2:wf_id}\", \"${3:lab_id}\")",
            "@config_type(WorkflowConfigType)",
            "async def ${4:wf_func_name}(${7:param_name}: int) -> None:",
            "\tjob_config_ref: WorkflowConfigType = get_workflow_config()"
        ],
        "description": "Workflow with configuration"
    },
    "Workflow": {
        "prefix": "workflow",
        "body": [
            "from artificial.workflows.decorators import config_type, field, parameter, workflow",
            "from dataclasses import dataclass",
            "",
            "",
            "@parameter('${5:param_name}', {'required': True, 'uiTitle': '${6:Display Name}'})",
            "@workflow(\"${1:wf_name}\", \"${2:wf_id}\", \"${3:lab_id}\")",
            "async def ${4:wf_func_name}(${5:param_name}: int) -> None:"
        ],
        "description": "Workflow"
    },
    "Parameter": {
        "prefix": "parameter",
        "body": [
            "@parameter('${1:param_name}', {'required': True, 'uiTitle': '${2:Display Name}'})"
        ],
        "description": "Request UI Parameter"
    },
    "Action Module": {
        "prefix": "action_module",
        "body": [
            "from __future__ import annotations",
            "",
            "import typing as t",
            "",
            "from artificial.adapter_common import BaseActionModule, action",
            "from artificial.adapter_common.alabpy_base import AlabPyBase",
            "from artificial.adapter_common.apis import AssetsApi",
            "from artificial.logging import get_logger",
            "",
            "logger = get_logger(__name__)",
            "class ${1:action_module_name}(BaseActionModule):",
            "\t_alabpy_base: AlabPyBase",
            "",
            "\tdef __init__(self, alabpy: AlabPyBase, asset_api: AssetsApi) -> None:",
            "\t\tsuper().__init__()",
            "\t\tself._alabpy_base = alabpy",
            "\t\tself._asset_api = asset_api",
            "",
            "\tasync def ainit(self) -> None:",
            "\t\tpass",
            "",
            "\tasync def aclose(self) -> None:",
            "\t\tpass",
            "",
            "\tasync def __aenter__(self) -> ${1:action_module_name}:",
            "\t\tawait self.ainit()",
            "\t\treturn self",
            "",
            "\tasync def __aexit__(self, exc_type: t.Any, exc_value: t.Any, traceback: t.Any) -> None:",
            "\t\tawait self.aclose()"
        ],
        "description": "Action Module"
    }
}
