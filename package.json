{
  "name": "artificial-workflow-extension",
  "displayName": "Artificial Inc. Workflow Authoring VSCode Extension",
  "description": "Extension to help author Artificial workflows in Orchestration Python",
  "publisher": "artificial",
  "license": "apache-2.0",
  "author": {
    "name": "Artificial, Inc."
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/artificialinc/workflow-author-extension"
  },
  "version": "3.2.6",
  "icon": "resources/icon.png",
  "engines": {
    "vscode": "^1.71.0"
  },
  "bugs": {
    "url": "https://github.com/artificialinc/workflow-author-extension/issues"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onLanguage:python",
    "onLanguage:yaml"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "configuration": {
      "title": "Artificial Workflow Authoring",
      "properties": {
        "artificial.workflow.author.assistantStubPath": {
          "type": "string",
          "default": "workflow/stubs_assistants.py",
          "description": "Path to generate assistant stubs"
        },
        "artificial.workflow.author.adapterActionStubPath": {
          "type": "string",
          "default": "workflow/stubs_actions.py",
          "description": "Path to generate adapter action stubs"
        },
        "artificial.workflow.author.modulePath": {
          "type": "string",
          "default": "main.plugin",
          "description": "Name of Adapter Module"
        },
        "artificial.workflow.author.devMode": {
          "type": "boolean",
          "default": false,
          "description": "Enable dev mode"
        }
      }
    },
    "colors": [
      {
        "id": "artificial.typeError",
        "description": "Type Error Decoration Color",
        "defaults": {
          "dark": "#ff0000",
          "light": "#ff0000",
          "highContrast": "#ff0000"
        }
      }
    ],
    "snippets": [
      {
        "language": "python",
        "path": "./snippets.json"
      },
      {
        "language": "yaml",
        "path": "./yamlsnippets.json"
      }
    ],
    "viewsWelcome": [
      {
        "view": "adapterActions",
        "contents": "No Adapter Stubs found, hit generate to get started.\n[Generate Stubs](command:adapterActions.generateActionStubs)"
      },
      {
        "view": "assistantsByLab",
        "contents": "No Assistant Stubs found, hit generate to get started.\n[Generate Stubs](command:assistantsByLab.generateAssistantStubs)"
      },
      {
        "view": "labAsstData",
        "contents": "[Export Labs & Assistants from Artificial](command:labAsstData.exportData)\n "
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "artificial-workflows",
          "title": "Artificial Workflows",
          "icon": "resources/artificial.svg"
        }
      ]
    },
    "views": {
      "artificial-workflows": [
        {
          "id": "adapterActions",
          "name": "Adapter Functions"
        },
        {
          "id": "assistantsByLab",
          "name": "Assistants"
        },
        {
          "id": "configs",
          "name": "Configuration"
        },
        {
          "id": "loadingConfigByLab",
          "name": "Loading Configs"
        },
        {
          "id": "workflows",
          "name": "Workflow Publishing"
        },
        {
          "id": "labAsstData",
          "name": "Lab & Assistant Export/Import"
        }
      ]
    },
    "commands": [
      {
        "command": "loadingConfigByLab.copyID",
        "title": "Copy Loading Config ID",
        "category": "Artificial"
      },
      {
        "command": "assistantsByLab.generateAssistantStubs",
        "title": "Generate Assistant Stubs",
        "category": "Artificial"
      },
      {
        "command": "adapterActions.generateActionStubs",
        "title": "Generate Action Stubs",
        "category": "Artificial"
      },
      {
        "command": "adapterActions.addToFile",
        "title": "Add Action Function Call to Workflow",
        "category": "Artificial",
        "icon": "$(plus)"
      },
      {
        "command": "adapterActions.refreshEntry",
        "title": "Refresh Python Functions",
        "category": "Artificial",
        "icon": "$(refresh)"
      },
      {
        "command": "adapterActions.signin",
        "title": "Sign In",
        "category": "Artificial",
        "icon": {
          "light": "resources/light/refresh.svg",
          "dark": "resources/dark/refresh.svg"
        }
      },
      {
        "command": "adapterActions.updateAdapterImage",
        "title": "Update Adapter Image",
        "category": "Artificial",
        "icon": "$(refresh)"
      },
      {
        "command": "adapterActions.executeAdapterAction",
        "title": "Execute Adapter Action",
        "category": "Artificial",
        "icon": "$(refresh)"
      },
      {
        "command": "workflows.refreshEntry",
        "title": "Refresh Workflows",
        "category": "Artificial",
        "icon": "$(refresh)"
      },
      {
        "command": "workflows.publish",
        "title": "Publish Workflow",
        "category": "Artificial",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "workflows.treePublish",
        "title": "Publish Workflow",
        "category": "Artificial",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "workflows.generateBinary",
        "title": "Generate workflow binary file",
        "category": "Artificial"
      },
      {
        "command": "workflows.generateJson",
        "title": "Generate workflow JSON file",
        "category": "Artificial"
      },
      {
        "command": "assistantsByLab.addToFile",
        "title": "Add Assistant Call to Workflow",
        "category": "Artificial",
        "icon": "$(plus)"
      },
      {
        "command": "assistantsByLab.refreshEntry",
        "title": "Refresh Assistants",
        "category": "Artificial",
        "icon": "$(refresh)"
      },
      {
        "command": "configs.refreshEntry",
        "title": "Refresh Configs",
        "category": "Artificial",
        "icon": "$(refresh)"
      },
      {
        "command": "loadingConfigByLab.refreshEntry",
        "title": "Refresh Configs",
        "category": "Artificial",
        "icon": "$(refresh)"
      },
      {
        "command": "labAsstData.exportData",
        "title": "Export ALL Lab and Assistant Data",
        "category": "Artificial",
        "icon": "$(cloud-download)"
      },
      {
        "command": "labAsstData.importData",
        "title": "Publish ALL Lab and Assistant Data",
        "category": "Artificial",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "labAsstData.importDataSingle",
        "title": "Publish Single Lab or Assistant",
        "category": "Artificial",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "labAsstData.exportDataSingle",
        "title": "Export Single Lab or Assistant",
        "category": "Artificial",
        "icon": "$(cloud-download)"
      },
      {
        "command": "configActions.updateLab",
        "title": "Choose Lab for Adapter to Connect to",
        "category": "Artificial",
        "icon": "$(refresh)"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "loadingConfigByLab.copyID",
          "when": "False"
        },
        {
          "command": "labAsstData.importDataSingle",
          "when": "False"
        },
        {
          "command": "labAsstData.exportDataSingle",
          "when": "False"
        },
        {
          "command": "workflows.publish",
          "when": "False"
        },
        {
          "command": "workflows.treePublish",
          "when": "False"
        },
        {
          "command": "workflows.generateBinary",
          "when": "False"
        },
        {
          "command": "workflows.generateJson",
          "when": "False"
        },
        {
          "command": "assistantsByLab.addToFile",
          "when": "False"
        },
        {
          "command": "adapterActions.addToFile",
          "when": "False"
        },
        {
          "command": "adapterActions.executeAdapterAction",
          "when": "config.artificial.workflow.author.devMode"
        },
        {
          "command": "adapterActions.signin"
        }
      ],
      "view/title": [
        {
          "command": "adapterActions.refreshEntry",
          "when": "view == adapterActions",
          "group": "navigation"
        },
        {
          "command": "adapterActions.generateActionStubs",
          "when": "view == adapterActions",
          "group": "navigation"
        },
        {
          "command": "assistantsByLab.refreshEntry",
          "when": "view == assistantsByLab",
          "group": "navigation"
        },
        {
          "command": "assistantsByLab.generateAssistantStubs",
          "when": "view == assistantsByLab",
          "group": "navigation"
        },
        {
          "command": "workflows.refreshEntry",
          "when": "view == workflows",
          "group": "navigation"
        },
        {
          "command": "configs.refreshEntry",
          "when": "view == configs",
          "group": "navigation"
        },
        {
          "command": "labAsstData.exportData",
          "when": "view == labAsstData",
          "group": "navigation"
        },
        {
          "command": "labAsstData.importData",
          "when": "view == labAsstData",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "loadingConfigByLab.copyID",
          "when": "view == loadingConfigByLab && viewItem == LOADINGCONFIG"
        },
        {
          "command": "adapterActions.addToFile",
          "when": "view == adapterActions && viewItem == FUNCTION",
          "group": "inline"
        },
        {
          "command": "assistantsByLab.addToFile",
          "when": "view == assistantsByLab && viewItem == ASSISTANT",
          "group": "inline"
        },
        {
          "command": "workflows.treePublish",
          "when": "view == workflows",
          "group": "inline"
        },
        {
          "command": "workflows.generateBinary",
          "when": "view == workflows"
        },
        {
          "command": "workflows.generateJson",
          "when": "view == workflows"
        },
        {
          "command": "labAsstData.exportDataSingle",
          "when": "view == labAsstData && viewItem == DATA",
          "group": "inline"
        },
        {
          "command": "labAsstData.importDataSingle",
          "when": "view == labAsstData && viewItem == DATA",
          "group": "inline"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish2": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext .ts --fix",
    "test": "CI=true jest --coverage",
    "vscode:prepublish": "npm run esbuild-base -- --minify",
    "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
    "esbuild": "npm run esbuild-base -- --sourcemap",
    "esbuild-watch": "npm run esbuild-base -- --sourcemap --watch",
    "test-compile": "tsc -p ./"
  },
  "devDependencies": {
    "@types/github-url-from-git": "^1.5.1",
    "@types/glob": "^7.2.0",
    "@types/google-protobuf": "^3.15.6",
    "@types/jest": "27.5.0",
    "@types/lodash": "^4.14.185",
    "@types/needle": "^3.2.0",
    "@types/node": "16.x",
    "@types/vscode": "^1.71.0",
    "@types/zen-observable": "^0.8.3",
    "@typescript-eslint/eslint-plugin": "^5.31.0",
    "@typescript-eslint/parser": "^5.31.0",
    "@vscode/test-electron": "^2.1.5",
    "cd": "^0.3.3",
    "esbuild": "^0.15.18",
    "eslint": "^8.20.0",
    "grpc-node-server-reflection": "^1.0.2",
    "jest": "^29.5.0",
    "jest-mock-extended": "^3.0.4",
    "jest-mock-vscode": "^2.1.1",
    "ts-jest": "^29.0.5",
    "typescript": "^4.7.4",
    "wait-for-expect": "^3.0.2"
  },
  "dependencies": {
    "@apollo/client": "^3.6.9",
    "@artificial/artificial-protos": "^0.108.2",
    "@grpc/grpc-js": "^1.10.9",
    "@grpc/proto-loader": "0.7.8",
    "@snyk/docker-registry-v2-client": "^2.10.1",
    "apollo-link-timeout": "^4.0.0",
    "cross-fetch": "^3.1.5",
    "dotenv": "^16.0.3",
    "github-url-from-git": "^1.5.0",
    "glob": "^8.0.3",
    "google-protobuf": "^3.21.2",
    "graphql": "^16.8.1",
    "grpc-js-reflection-client": "^1.2.14",
    "lodash": "^4.17.21",
    "protobufjs": ">=7.2.5",
    "python-ast": "^0.1.0",
    "yaml": "^2.1.1"
  },
  "extensionDependencies": [
    "vscode.git"
  ]
}